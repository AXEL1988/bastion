// ========================================
// MIXINS
// ========================================

@use 'variables' as *;

// ===== MEDIA QUERIES =====
// Mobile-first approach

@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media (min-width: $breakpoint-xxl) {
      @content;
    }
  }
}

// Custom breakpoint
@mixin custom-breakpoint($size) {
  @media (min-width: $size) {
    @content;
  }
}

// Max-width media queries
@mixin respond-to-max($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: ($breakpoint-xs - 1px)) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (max-width: ($breakpoint-sm - 1px)) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: ($breakpoint-md - 1px)) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: ($breakpoint-lg - 1px)) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: ($breakpoint-xl - 1px)) {
      @content;
    }
  }
}

// ===== FLEXBOX =====
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

// ===== GRID =====
@mixin grid-auto-fit($min-width: 250px, $gap: $grid-gap) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 250px, $gap: $grid-gap) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

// ===== TYPOGRAPHY =====
@mixin heading-base {
  font-family: $font-primary;
  font-weight: $font-weight-bold;
  line-height: $line-height-tight;
  color: $text-primary;
  margin: 0;
}

@mixin body-text {
  font-family: $font-secondary;
  font-weight: $font-weight-regular;
  line-height: $line-height-normal;
  color: $text-primary;
}

// Truncate text
@mixin truncate-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multiline truncate
@mixin truncate-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

// ===== BUTTONS =====
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $spacing-md $spacing-xl;
  border: none;
  border-radius: $border-radius-md;
  font-family: $font-secondary;
  font-weight: $font-weight-semibold;
  font-size: $font-size-body;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-normal;
  text-align: center;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

@mixin button-hover-lift {
  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: $shadow-lg;
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

// ===== ANIMATIONS =====
@mixin fade-in($duration: $transition-normal) {
  animation: fadeIn $duration ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@mixin slide-up($duration: $transition-normal, $distance: 20px) {
  animation: slideUp $duration ease-out;
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(#{$distance});
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

// ===== POSITIONING =====
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-full {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// ===== ASPECT RATIO =====
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: calc(($height / $width) * 100%);
  }
}

// ===== VISUALLY HIDDEN =====
// Hides element visually but keeps it accessible for screen readers
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// ===== FOCUS STATES =====
@mixin focus-outline {
  outline: 2px solid $color-accent;
  outline-offset: 2px;
}

@mixin focus-visible {
  &:focus-visible {
    @include focus-outline;
  }
}

// ===== SCROLL BEHAVIOR =====
@mixin smooth-scroll {
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

// ===== CONTAINER =====
@mixin container {
  width: 100%;
  top: 80px;
  max-width: $container-max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $container-padding-mobile;
  padding-right: $container-padding-mobile;
  
  @include respond-to(md) {
    padding-left: $container-padding;
    padding-right: $container-padding;
  }
}

// ===== SECTION =====
@mixin section-padding {
  padding-top: $section-padding-mobile;
  padding-bottom: $section-padding-mobile;
  
  @include respond-to(md) {
    padding-top: $section-padding-tablet;
    padding-bottom: $section-padding-tablet;
  }
  
  @include respond-to(lg) {
    padding-top: $section-padding-desktop;
    padding-bottom: $section-padding-desktop;
  }
}

// ===== RESET LIST =====
@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

// ===== HOVER EFFECTS =====
@mixin hover-underline($color: currentColor) {
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: $color;
    transition: width $transition-normal;
  }
  
  &:hover::after {
    width: 100%;
  }
}

// ===== IMAGE COVER =====
@mixin image-cover {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

